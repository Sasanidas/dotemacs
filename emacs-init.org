#+AUTHOR: Jonathan Chu
#+TITLE:  My Emacs Configuration

* Appearance

** Color theme
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package atom-dark-theme
      :ensure
      :config
      (load-theme 'atom-dark t))
  #+END_SRC

** Smart-mode-line
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package smart-mode-line
       :ensure
       :config
       (setq sml/no-confirm-load-theme t)
       (setq sml/theme 'respectful)
       (add-hook 'after-init-hook 'sml/setup))
   #+END_SRC

* Global Configuration

  Some essential configuration.

  #+BEGIN_SRC emacs-lisp :tangle yes
    ;; set paths from shell
    (use-package exec-path-from-shell
      :ensure
      :if (memq window-system '(mac ns))
      :config
      (exec-path-from-shell-initialize))

    ;; only type 'y' or 'n' instead of 'yes' or 'no'
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; no splash screen
    (setq inhibit-splash-screen t)

    ;; no message on startup
    (setq initial-scratch-message nil)

    ;; no menu bar
    (menu-bar-mode -1)

    ;; start position and frame size
    (add-to-list 'default-frame-alist '(left . 0))
    (add-to-list 'default-frame-alist '(top . 0))
    (add-to-list 'default-frame-alist '(height . 43))
    (add-to-list 'default-frame-alist '(width . 150))

    ;; M-q
    (setq fill-column 80)

    ;; no toolbar
    (when (functionp 'tool-bar-mode)
      (tool-bar-mode -1))  ;; no toolbar

    ;; disable scroll bars
    (if window-system
        (progn
          (scroll-bar-mode -1)
          (set-frame-font "Inconsolata 15"))) ;; set font

    ;; make the font more visually pleasing
    (set-face-attribute 'default nil :height 160)

    ;; nice fonts in OS X
    (setq mac-allow-anti-aliasing t)

    ;; no word wrap
    (setq-default truncate-lines 1)

    (setq-default line-spacing 4)

    ;; no tabs
    (setq-default indent-tabs-mode nil)

    ;; delete trailing whitespace in all modes
    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    ;; show line number in mode line
    (line-number-mode 1)

    ;; show column number in the mode line
    (column-number-mode 1)

    ;; show extra whitespace
    (setq show-trailing-whitespace t)

    ;; ensure last line is a return
    (setq require-final-newline t)

    ;; set encoding
    (prefer-coding-system 'utf-8)

    ;; and tell emacs to play nice with encoding
    (define-coding-system-alias 'UTF-8 'utf-8)
    (define-coding-system-alias 'utf8 'utf-8)

    ;; make sure looking at most recent changes
    (global-auto-revert-mode 1)

    (setq window-combination-resize t)

    ;;keep cursor at same position when scrolling
    (setq scroll-preserve-screen-position 1)

    ;; scroll one line at a time
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
    (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
    (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
    (setq scroll-step 1) ;; keyboard scroll one line at a time
    (setq scroll-conservatively 10000)

    ;; open with in original frame, not new window
    (setq ns-pop-up-frames nil)

    ;; sentences end with single space
    (setq sentence-end-double-space nil)

    ;; useful for camelCase
    (subword-mode 1)

    ;; delete selection, insert text
    (delete-selection-mode 1)

    ;; javascript
    (setq js-indent-level 4)

    ;; css
    (setq css-indent-offset 2)

    ;; prevent active process query on quit
    (require 'cl)
    (defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
      (flet ((process-list ())) ad-do-it))

    ;; instantly display current key sequence in mini buffer
    (setq echo-keystrokes 0.02)

    ;; server mode
    (if (not server-mode)
        (server-start nil t))
  #+END_SRC

* Major Modes

** Lisp

*** Clojure

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package clojure-mode
        :ensure
        :config
        (define-clojure-indent
          (defroutes 'defun)
          (GET 2)
          (POST 2)
          (PUT 2)
          (DELETE 2)
          (HEAD 2)
          (ANY 2)
          (context 2)))
    #+END_SRC

** Python

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package python-mode
        :ensure
        :config
        (add-hook 'python-mode-hook
                  '(lambda ()
                     (setq fill-column 80)))
        (add-to-list 'auto-mode-alist '("\\.py" . python-mode)))
    #+END_SRC

** Elpy

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package elpy
       :ensure
       :config
       (elpy-enable))
   #+END_SRC


** Magit

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package magit
       :ensure
       :config
       (progn
         (setq magit-push-always-verify nil)
         (setq magit-completing-read-function 'ivy-completing-read)
         (setq magit-last-seen-setup-instructions "1.4.0"))
       :bind
       ("C-x g" . magit-status)
       ("C-c C-a" . magit-commit-amend))
   #+END_SRC

** Yasnippet

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package yasnippet
       :ensure
       :config
       (progn
         (yas-global-mode 1)
         (setq yas-snippet-dirs (append yas-snippet-dirs
                                        '("~/.emacs.d/snippets")))))
   #+END_SRC

** Web mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package web-mode
       :ensure
       :config
       (progn
         (setq web-mode-markup-indent-offset 2)
         (setq web-mode-css-indent-offset 2)
         (setq web-mode-code-indent-offset 2)
         (add-to-list 'auto-mode-alist '("\\.hb\\.html\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
         (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))))
   #+END_SRC

** LESS CSS mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package less-css-mode
       :ensure
       :config
       (add-to-list 'auto-mode-alist '("\\.less\\'" . less-css-mode)))
   #+END_SRC

** Flycheck

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package flycheck
       :ensure
       :defer 2
       :config
       (global-flycheck-mode 1))
   #+END_SRC

** Flx-ido

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package flx-ido
       :ensure)
   #+END_SRC

** Ido mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ido
       :config
       (progn
         (ido-mode t)
         (ido-everywhere t)
         (flx-ido-mode t)
         (setq ido-enable-flex-matching t)
         (setq ido-use-faces nil)))
   #+END_SRC

** Ido vertical mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ido-vertical-mode
       :ensure
       :config
       (ido-vertical-mode 1)
       (setq ido-vertical-define-keys 'C-n-and-C-p-only))
   #+END_SRC

** Ido ubiquitous

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ido-ubiquitous
       :ensure
       :config
       (ido-ubiquitous-mode 1))
   #+END_SRC

** Smex

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package smex
       :ensure
       :init
       (smex-initialize)
       :bind
       ("M-x" . smex)
       ("M-X" . smex-major-mode-commands)
       ("C-c C-c M-x" . execute-extended-command))
   #+END_SRC

** Ag

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ag
       :ensure
       :config
       (progn
         (setq ag-highlight-search t
                ag-reuse-buffers t)))
   #+END_SRC

** Projectile

    #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package projectile
       :ensure
       :diminish ""
       :config
       (projectile-global-mode 1)
       :init
       (bind-key "s-t" 'projectile-find-file))
   #+END_SRC

** Org mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package org
       :config
       (setq org-directory "~/Dropbox/org")
       (setq org-log-done t)
       (setq org-todo-keywords
             '((sequence "TODO(t)" "|" "DONE(d)")
               (sequence "WAITING(w)" "|" "CANCELED(c)")
               (sequence "NEXT(n)" "|" "HOLD(h)")
               ))
       (setq org-todo-keyword-faces
             '(("TODO" :foreground "green" :weight bold)
               ("NEXT" :foreground "blue" :weight bold)
               ("WAITING" :foreground "orange" :weight bold)
               ("HOLD" :foreground "magenta" :weight bold)
               ("CANCELED" :foreground "red" :weight bold)))
       (setq org-completion-use-ido t)
       (setq org-startup-folded nil))
   #+END_SRC

** Whitespace mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package whitespace
       :config
       (progn
         (global-whitespace-mode 1)
         (setq whitespace-action '(auto-cleanup))
         (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))))
   #+END_SRC

** Highlight brackets

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package paren
       :config
       (show-paren-mode 1))
   #+END_SRC

** Save place

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package saveplace
       :config
       (progn
         (setq-default save-place t)
         (setq save-place-file "~/.emacs.d/saved-places")))
   #+END_SRC

** Command log mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package command-log-mode
       :ensure)
   #+END_SRC

** Gitconfig Mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package gitconfig-mode
       :ensure)
   #+END_SRC

** Gitignore mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package gitignore-mode
       :ensure)
   #+END_SRC
