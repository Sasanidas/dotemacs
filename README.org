#+STARTUP: showall
#+TITLE:     My Emacs Configuration
#+AUTHOR:    Jonathan Chu
#+EMAIL:     me@jonathanchu.is
#+DATE:      2015-03-01

** TODO TODO
- [X] Introduction
- [X] Installation
- [ ] Requirements
- [ ] Updates
- [X] Global config
- [ ] Functions
- [ ] Modes
- [ ] Key bindings

** Introduction

   This is my emacs configuration, a somewhat simple config compared to
   most. It's geared towards OS X, although it should work on most *nix
   configs. I've never tried this on Windows, so YMMV.

   The entire configuration is one file =~/.emacs.d/init.el= and aims to
   provide you with a barebones configuration with sane defaults, built
   upon =package.el=.

   Although emacs has support for many programming languages, this
   config is geared towards the following languages and workflows:

- Python
- CSS / LESS
- JavaScript
- Markdown
- Clojure


** Installation

   To install, it's recommended to clone this repo wherever you prefer
   and symlink the directory to =~/.emacs.d=.

   #+BEGIN_SRC
   git clone https://github.com/jonathanchu/dotemacs.git
   #+END_SRC

   There is a =Makefile= provided that will create the symlink for you at
   =~/.emacs.d=:

   #+BEGIN_SRC
   make setup
   #+END_SRC

   My current emacs distro of choice is:

   #+BEGIN_SRC
   brew install emacs --with-cocoa
   #+END_SRC

   Please note, this requires [[http://brew.sh][homebrew]] to be installed.

** Requirements

   There are a few requirements needed for this config to properly run.
   All of these prerequisites can be installed via =homebrew= and =npm=.

   #+BEGIN_SRC
   brew install ag
   brew install node
   npm install jshint
   #+END_SRC

   For using =python-mode= and =anaconda=, you'll need to have =pip=
   installed and install the following packages:

   #+BEGIN_SRC
   pip install jedi
   pip install service-factory
   pip install six
   #+END_SRC

** Updates

   To update the packages, type @@html:<kbd>@@M-x
   list-packages@@html:</kbd>@@, then @@html:<kbd>@@U@@html:</kbd>@@
   followed by @@html:<kbd>@@x@@html:</kbd>@@.

   I recently started to use @Malabarba's excellent [[https://github.com/Malabarba/paradox/][paradox]], which can be
   invoked similarly as such - @@html:<kbd>@@M-x
   paradox-list-packages@@html:</kbd>@@, then
   @@html:<kbd>@@U@@html:</kbd>@@ followed by
   @@html:<kbd>@@x@@html:</kbd>@@.

** Global Config

   There are some very common things that most Emacs users do to setup
   and configure their text editor environment.

   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)  ;; only type 'y' or 'n' instead of 'yes' or 'no'
   (setq inhibit-splash-screen t)  ;; no splash screen
   (setq initial-scratch-message nil)  ;; no message on startup
   (menu-bar-mode -1)  ;; no menu bar
   (setq fill-column 80)  ;; M-q
   (when (functionp 'tool-bar-mode)
     (tool-bar-mode -1))  ;; no toolbar
   (if window-system
       (progn
         (scroll-bar-mode -1)  ;; disable scroll bars
         (set-frame-font "Inconsolata 15"))) ;; set font
   (set-face-attribute 'default nil :height 160)  ;; make the font more visually pleasing
   (setq mac-allow-anti-aliasing t)  ;; nice fonts in OS X
   (setq-default truncate-lines 1)  ;; no word wrap
   (setq-default line-spacing 4)
   (setq-default indent-tabs-mode nil)  ;; no tabs
   #+END_SRC

** Packages

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (setq package-enable-at-startup nil)
   (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                            ("melpa" . "http://melpa.org/packages/")))

   (package-initialize)

   ;; Bootstrap `use-package'
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   ;; use-package
   (eval-when-compile
     (require 'use-package))
   (require 'diminish)
   (require 'bind-key)
   #+END_SRC

** Modes

*** Whitespace

    #+BEGIN_SRC emacs-lisp
    (use-package whitespace
      :config
      (progn
        (global-whitespace-mode 1)
        (setq whitespace-action '(auto-cleanup))
        (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))))
    #+END_SRC

*** Highlight brackets

    #+BEGIN_SRC emacs-lisp
    (use-package paren
      :config
      (show-paren-mode 1))
    #+END_SRC

*** Saveplace

    #+BEGIN_SRC emacs-lisp
    (use-package saveplace
      :config
      (progn
        (setq-default save-place t)
        (setq save-place-file "~/.emacs.d/saved-places")))
    #+END_SRC

*** Color theme

    #+BEGIN_SRC emacs-lisp
    (use-package atom-one-dark-theme
      :ensure
      :config
      (load-theme 'atom-one-dark t))
    #+END_SRC

*** Command log mode

    #+BEGIN_SRC emacs-lisp
    (use-package command-log-mode
      :ensure)
    #+END_SRC

*** Gitconfig mode

    #+BEGIN_SRC emacs-kisp
    (use-package gitconfig-mode
      :ensure)
    #+END_SRC

*** Gitignore mode

    #+BEGIN_SRC emacs-lisp
    (use-package gitignore-mode
      :ensure)
    #+END_SRC

*** Git timemachine

    #+BEGIN_SRC emacs-lisp
    (use-package git-timemachine
      :ensure)
    #+END_SRC

*** GitHub browse file

    #+BEGIN_SRC emacs-lisp
    (use-package github-browse-file
      :ensure)
    #+END_SRC

** Functions

*** Zap-to-char

    #+BEGIN_SRC emacs-lisp
    (defadvice zap-to-char (after my-zap-to-char-advice (arg char) activate)
      "Kill up to the ARG'th occurence of CHAR, and leave CHAR.
    The CHAR is replaced and the point is put before CHAR."
      (insert char)
      (forward-char -1))
    #+END_SRC

*** Smarter move to the beginning of a line

    #+BEGIN_SRC emacs-lisp
    (defun smarter-move-beginning-of-line (arg)
      "Move point back to indentation of beginning of line.
    Move point to the first non-whitespace character on this line.
    If point is already there, move to the beginning of the line.
    Effectively toggle between the first non-whitespace character and
    the beginning of the line.
    If ARG is not nil or 1, move forward ARG - 1 lines first.  If
    point reaches the beginning or end of the buffer, stop there."
      (interactive "^p")
      (setq arg (or arg 1))

      ;; Move lines first
      (when (/= arg 1)
        (let ((line-move-visual nil))
          (forward-line (1- arg))))

      (let ((orig-point (point)))
        (back-to-indentation)
        (when (= orig-point (point))
          (move-beginning-of-line 1))))
    #+END_SRC

*** Highlight call to ipdb

    #+BEGIN_SRC emacs-lisp
    (defun annotate-pdb ()
      "Highlight lines using a regexp that set the pdb breakpoint."
      (interactive)
      (highlight-lines-matching-regexp "import ipdb")
      (highlight-lines-matching-regexp "pdb.set_trace()"))
    (add-hook 'python-mode-hook 'annotate-pdb)
    #+END_SRC

*** Write temp files to specific directory

    #+BEGIN_SRC emacs-lisp
    (defvar user-temporary-file-directory
      (concat temporary-file-directory user-login-name "/"))
    (make-directory user-temporary-file-directory t)
    (setq backup-by-copying t)
    (setq backup-directory-alist
          `(("." . ,user-temporary-file-directory)
            (,tramp-file-name-regexp nil)))
    (setq auto-save-list-file-prefix
          (concat user-temporary-file-directory ".auto-saves-"))
    (setq auto-save-file-name-transforms
          `((".*" ,user-temporary-file-directory t)))
    #+END_SRC

*** Duplicate the current line

    #+BEGIN_SRC emacs-lisp
    (defun duplicate-line ()
      "Duplicate the current line."
      (interactive)
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (open-line 1)
      (forward-line 1)
      (yank))
    #+END_SRC

*** Use ido selection for `recentf`

    #+BEGIN_SRC emacs-lisp
    (defun ido-choose-from-recentf ()
      "Use ido to select a recently visited file from the `recentf-list'."
      (interactive)
      (find-file (ido-completing-read "Open file: " recentf-list nil t)))
    #+END_SRC

*** Swap (transpose) windows

    #+BEGIN_SRC emacs-lisp
    (defun transpose-windows ()
      "If you have two windows, it swaps them."
      (interactive)
      (let ((this-buffer (window-buffer (selected-window)))
            (other-buffer (prog2
                              (other-window +1)
                              (window-buffer (selected-window))
                            (other-window -1))))
        (switch-to-buffer other-buffer)
        (switch-to-buffer-other-window this-buffer)
        (other-window -1)))
    #+END_SRC

*** Convert word DOuble CApitals to Single Capitals

    #+BEGIN_SRC emacs-lisp
    (defun dcaps-to-scaps ()
      "Convert word in DOuble CApitals to Single Capitals."
      (interactive)
      (and (= ?w (char-syntax (char-before)))
           (save-excursion
             (and (if (called-interactively-p 1)
                      (skip-syntax-backward "w")
                    (= -3 (skip-syntax-backward "w")))
                  (let (case-fold-search)
                    (looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
                  (capitalize-word 1)))))

    (add-hook 'post-self-insert-hook 'dcaps-to-scaps)
    #+END_SRC

*** Timestamps in *Messages*

    #+BEGIN_SRC emacs-lisp
    (defun current-time-microseconds ()
      (let* ((nowtime (current-time))
             (now-ms (nth 2 nowtime)))
        (concat (format-time-string "[%Y-%m-%dT%T" nowtime) (format ".%d] " now-ms))))

    (defadvice message (before test-symbol activate)
      (if (not (string-equal (ad-get-arg 0) "%s%s"))
          (let ((inhibit-read-only t)
                (deactivate-mark nil))
            (with-current-buffer "*Messages*"
              (goto-char (point-max))
              (if (not (bolp))
                  (newline))
              (insert (current-time-microseconds))))))
    #+END_SRC

** Key bindings

   I prefer to use `smex` instead of the default
   @@html:<kbd>@@M-x@@html:</kbd>@@ behavior. I map `smex` to
   @@html:<kbd>@@M-x@@html:</kbd>@@.
